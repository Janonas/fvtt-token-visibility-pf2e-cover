{  "name": "Measure Cover",  "type": "script",  "author": "nx29hoGineoQv9Bs",  "img": "icons/svg/shield.svg",  "scope": "global",  "command": "// Macro to measure cover between selected tokens and targets\n\n/**\n * Measure distance between two points.\n * @param {PIXI.Point|Point3d} a\n * @param {PIXI.Point|Point3d} b\n * @returns {number} Returns two dimensional distance for PIXI.Point, \n *   three dimensional distance for Point3d.\n */\nfunction distanceBetweenPoints(a, b) {\n  return b.subtract(a).magnitude();\n}\n\n/**\n * Convert pixels to grid units.\n * @param {number} pixels   Amount in pixels (canvas coordinates)\n * @returns {number}\n */\nfunction pixelsToGridUnits(pixels) {\n  const { distance, size } = canvas.scene.dimensions;\n  return (pixels * distance) / size;\n}\n\nconst tokens = [];\nconst targets = [];\n\ncanvas.tokens.placeables.forEach(t => {\n  t.isTargeted && targets.push(t);\n  t.controlled && tokens.push(t);\n})\n\nif ( !tokens.length ) {\n  ui.notifications.error(\"Please select at least one token.\");\n  return;\n}\n\n// if ( !targets.length ) {\n//   ui.notifications.error(\"Please target at least one token.\");\n//   return;\n// }\n\nconst api = game.modules.get(\"tokenvisibility\").api;\nconst CoverCalculator = api.CoverCalculator;\nconst Point3d = api.Point3d;\nconst cover_results = [];\nlet html_content = '<form id=\"measure-cover\">';\n\nfor ( const token of tokens ) {\n  const target_results = [];\n  const token_center = new Point3d(token.center.x, token.center.y, token.topZ); // Measure from token vision point.\n  \n  cover_results.push(target_results);\n  html_content += \n  `\n  <h2> ${token.name} </h2>\n  <table id=\"${token.id}_table\" class=\"table table-striped\">\n  <thead>\n    <tr class=\"character-row\"> \n      <th colspan=\"2\" ><b>Target</b></th>\n      <th><b>Cover</b></th>\n      <th><b>Distance (3d)</b></th>\n    </tr>\n  </thead>\n  <tbody>\n  `;\n  \n  for ( const target of targets ) {\n    if ( token.id === target.id ) continue; // Skip targeting oneself. \n    \n    \n    const target_center = new Point3d(target.center.x, target.center.y, CoverCalculator.averageTokenElevation(target));\n    const dist = distanceBetweenPoints(token_center, target_center);\n    const coverCalc = new CoverCalculator(token, target);\n    const cover = coverCalc.targetCover();\n    target_results.push(cover); // Just for tracking and debugging\n    const targetImage = target.document.texture.src; // Token canvas image.\n    \n    html_content += \n    `\n    <tr> \n    <td><img src=\"${targetImage}\" alt=\"${target.name} image\" width=\"50\" border=\"0\"></td>\n    <td>${target.name}</td>\n    <td>${CoverCalculator.coverNameForType(cover)}</td>\n    <td>${Math.round(pixelsToGridUnits(dist))} ${canvas.scene.grid.units}</td>\n    </tr>\n    `;\n  }\n  html_content += \n  `\n  </tbody>\n  </table>\n  <br>\n  `;  \n}\n\nconst cover_algorithm = game.settings.get(\"tokenvisibility\", \"cover-algorithm\");\nconst cover_algorithm_description = game.i18n.localize(`tokenvisibility.settings.${cover_algorithm}`);\n\nhtml_content += \n`\n\n<em>Cover algorithm: ${cover_algorithm_description}</em>\n<br>\n<br>\n</form>\n`;\n\nconst d = new Dialog({\n    title: \"Cover by Target\",\n    content: html_content,\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: \"Done\",\n      }\n    },\n    default: \"Done\"\n    \n  });\n  \n\n// Base: ~ 110\n// Token table: ~ 90\n// Target row: ~ 60\n  \n// Height\n// 1 token, 0 targets: 200\n// 1 token, 1 target:  270\n// 1 token, 2 targets: 330\n\n// 2 token, 0 targets each: 290\n// 2 token, 1 target each:  410\n// 2 token, 2 targets each: 530\n\n//d.options.height = 270;\n\nlet height = 110;\nheight += 90 * tokens.length;\nfor ( let i = 0; i < tokens.length; i += 1 ) height += 60 * cover_results[i].length;\n\n\nd.position.height = height; \nd.options.resizable=true;\n\nd.render(true);",  "flags": {    "combat-utility-belt": {      "macroTrigger": ""    },    "exportSource": {      "world": "test-dnd5e",      "system": "dnd5e",      "coreVersion": "10.287",      "systemVersion": "2.0.3"    }  },  "_stats": {    "systemId": "dnd5e",    "systemVersion": "2.0.3",    "coreVersion": "10.287",    "createdTime": 1666899726209,    "modifiedTime": 1666906622965,    "lastModifiedBy": "nx29hoGineoQv9Bs"  }}
